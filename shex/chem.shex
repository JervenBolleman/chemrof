BASE <https://w3id.org/chemont/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX linkml: <https://w3id.org/linkml/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>


<PeriodicTableGroup> xsd:int

<Count> xsd:int

<NumberOfYears> xsd:int

<ChemicalEncoding> xsd:string

<SequenceString> xsd:string

<AminoAcidSequenceString> xsd:string

<DNASequenceString> xsd:string

linkml:String xsd:string

linkml:Integer xsd:integer

linkml:Boolean xsd:boolean

linkml:Float xsd:float

linkml:Double xsd:double

linkml:Decimal xsd:decimal

linkml:Time xsd:dateTime

linkml:Date xsd:date

linkml:Datetime xsd:dateTime

linkml:Uriorcurie IRI

linkml:Uri IRI

linkml:Ncname xsd:string

linkml:Objectidentifier IRI

linkml:Nodeidentifier NONLITERAL

<AcidAnionGroupingClass> CLOSED {
    (  $<AcidAnionGroupingClass_tes> (  &<GroupingClassForAcidsOrBases_tes> ;
          rdf:type [ <GroupingClassForAcidsOrBases> ] ? ;
          <name> @linkml:String ?
       ) ;
       rdf:type [ <AcidAnionGroupingClass> ] ?
    )
}

<AcidBase> CLOSED {
    (  $<AcidBase_tes> (  &<MolecularAnion_tes> ;
          rdf:type [ <MolecularAnion> ] ? ;
          <has_acid_form> @<BronstedAcid> ?
       ) ;
       rdf:type [ <AcidBase> ]
    )
}

<AcidBaseConflationClass> CLOSED {
    (  $<AcidBaseConflationClass_tes> (  &<GroupingClassForAcidsOrBases_tes> ;
          rdf:type [ <GroupingClassForAcidsOrBases> ] ? ;
          <has_physiological_base> @<AcidBase> ?
       ) ;
       rdf:type [ <AcidBaseConflationClass> ] ?
    )
}

<Allotrope> CLOSED {
    (  $<Allotrope_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          <allotropic_analog_of> @<ChemicalElement> ;
          <has_bonding_structure> @linkml:String
       ) ;
       rdf:type [ <Allotrope> ]
    )
}

<AminoAcidSequenceInterval> CLOSED {
    (  $<AminoAcidSequenceInterval_tes> (  &<SequenceInterval_tes> ;
          rdf:type [ <SequenceInterval> ] ? ;
          <has_sequence_representation> @<AminoAcidSequenceString> ?
       ) ;
       rdf:type [ <AminoAcidSequenceInterval> ]
    )
}

<AnionState> {
    (  $<AnionState_tes> (  &<Charged_tes> ;
          rdf:type [ <Charged> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <AnionState> ] ?
    )
}

<Atom>  (
    @<AtomIonicForm> OR @<ChemicalElement> OR @<FullySpecifiedAtom> OR @<Isotope> OR @<Nuclide>
)

<Atom_struct> {
    (  $<Atom_tes> (  &<ChemicalEntity_tes> ;
          rdf:type [ <ChemicalEntity> ] ? ;
          <atomic_number> @<Count> ? ;
          <symbol> @linkml:String ? ;
          <has_part> @<SubatomicParticle> ?
       ) ;
       rdf:type [ <Atom> ]
    )
}

<AtomAnion> CLOSED {
    (  $<AtomAnion_tes> (  &<MonoatomicIon_tes> ;
          rdf:type [ <MonoatomicIon> ] ? ;
          &<AnionState_tes> ;
          rdf:type [ <AnionState> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <AtomAnion> ]
    )
}

<AtomCation> CLOSED {
    (  $<AtomCation_tes> (  &<MonoatomicIon_tes> ;
          rdf:type [ <MonoatomicIon> ] ? ;
          &<CationState_tes> ;
          rdf:type [ <CationState> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <AtomCation> ]
    )
}

<AtomGroupingByPeriodicTableBlock> CLOSED {
    (  $<AtomGroupingByPeriodicTableBlock_tes> (  &<AtomGroupingByPeriodicTablePlacement_tes> ;
          rdf:type [ <AtomGroupingByPeriodicTablePlacement> ] ? ;
          <in_periodic_table_block> @<PeriodicTableBlock> ?
       ) ;
       rdf:type [ <AtomGroupingByPeriodicTableBlock> ] ?
    )
}

<AtomGroupingByPeriodicTableGroup> CLOSED {
    (  $<AtomGroupingByPeriodicTableGroup_tes> (  &<AtomGroupingByPeriodicTablePlacement_tes> ;
          rdf:type [ <AtomGroupingByPeriodicTablePlacement> ] ? ;
          <in_periodic_table_group> @<PeriodicTableGroup> ?
       ) ;
       rdf:type [ <AtomGroupingByPeriodicTableGroup> ] ?
    )
}

<AtomGroupingByPeriodicTablePlacement>  (
    @<AtomGroupingByPeriodicTableBlock> OR @<AtomGroupingByPeriodicTableGroup>
)

<AtomGroupingByPeriodicTablePlacement_struct> {
    (  $<AtomGroupingByPeriodicTablePlacement_tes> (  &<AtomGroupingClass_tes> ;
          rdf:type [ <AtomGroupingClass> ] ?
       ) ;
       rdf:type [ <AtomGroupingByPeriodicTablePlacement> ] ?
    )
}

<AtomGroupingByProperty> CLOSED {
    (  $<AtomGroupingByProperty_tes> (  &<AtomGroupingClass_tes> ;
          rdf:type [ <AtomGroupingClass> ] ?
       ) ;
       rdf:type [ <AtomGroupingByProperty> ] ?
    )
}

<AtomGroupingClass>  (
    CLOSED {
       (  $<AtomGroupingClass_tes> (  &<GroupingClass_tes> ;
             rdf:type [ <GroupingClass> ] ? ;
             <subtype_of> @<MoleculeGroupingClass> * ;
             <classifies> @<Atom> ?
          ) ;
          rdf:type [ <AtomGroupingClass> ] ?
       )
    } OR @<AtomGroupingByPeriodicTablePlacement> OR @<AtomGroupingByProperty>
)

<AtomIonicForm>  (
    @<MonoatomicIon> OR @<UnchargedAtom>
)

<AtomIonicForm_struct> {
    (  $<AtomIonicForm_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <elemental_charge> @linkml:Integer ? ;
          <elemental_change> @linkml:String ?
       ) ;
       rdf:type [ <AtomIonicForm> ]
    )
}

<AtomOccurrence> CLOSED {
    (  $<AtomOccurrence_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <occurrence_of> @<Atom> ;
          <valence> @linkml:Integer ? ;
          <oxidation_number> @linkml:Integer ? ;
          <formal_charge> @linkml:Integer ? ;
          <coordination_number> @linkml:Integer ?
       ) ;
       rdf:type [ <AtomOccurrence> ] ?
    )
}

<AtomicBond> CLOSED {
    (  $<AtomicBond_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <has_atom_occurrences> @<AtomOccurrence> * ;
          <bond_order> @linkml:Integer ? ;
          <bond_type> @<BondTypeEnum> ? ;
          <bond_length_in_angstroms> @linkml:Float ? ;
          <bond_angle> @linkml:Float ? ;
          <torsional_angle> @linkml:Float ?
       ) ;
       rdf:type [ <AtomicBond> ] ?
    )
}

<BronstedAcid> CLOSED {
    (  $<BronstedAcid_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          <acidity> @linkml:Float ? ;
          <hard_or_soft> @<HardOrSoftEnum> ? ;
          <acid_form_of> @<AcidBase> *
       ) ;
       rdf:type [ <BronstedAcid> ]
    )
}

<CationState> {
    (  $<CationState_tes> (  &<Charged_tes> ;
          rdf:type [ <Charged> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <CationState> ] ?
    )
}

<ChargeState>  (
    @<Charged> OR @<Uncharged>
)

<ChargeState_struct> {
    (  $<ChargeState_tes> (  &<State_tes> ;
          rdf:type [ <State> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <ChargeState> ] ?
    )
}

<Charged>  (
    @<AnionState> OR @<CationState>
)

<Charged_struct> {
    (  $<Charged_tes> (  &<ChargeState_tes> ;
          rdf:type [ <ChargeState> ] ?
       ) ;
       rdf:type [ <Charged> ] ?
    )
}

<ChemicalCharacteristic> CLOSED {
    (  $<ChemicalCharacteristic_tes> rdf:type . * ;
       rdf:type [ <ChemicalCharacteristic> ] ?
    )
}

<ChemicalElement> CLOSED {
    (  $<ChemicalElement_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <symbol> @linkml:String ? ;
          <in_periodic_table_group> @<PeriodicTableGroup> ? ;
          <in_periodic_table_block> @<PeriodicTableBlock> ? ;
          <boiling_point_in_celcius> @linkml:Float ? ;
          <melting_point_in_celcius> @linkml:Float ? ;
          <standard_atomic_weight> @linkml:Float ? ;
          <electron_configuration> @linkml:String ? ;
          <has_stereocenter> @<Stereocenter> *
       ) ;
       rdf:type [ <ChemicalElement> ]
    )
}

<ChemicalEntity>  (
    @<Atom> OR @<PolyatomicEntity> OR @<SubatomicParticle>
)

<ChemicalEntity_struct> {
    (  $<ChemicalEntity_tes> (  &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <name> @linkml:String ? ;
          <is_radical> @linkml:Boolean ? ;
          <has_standard_inchi_object> @<StandardInchiObject> ? ;
          <has_characteristic> @<ChemicalCharacteristic> ?
       ) ;
       rdf:type [ <ChemicalEntity> ]
    )
}

<ChemicalEntityOrGrouping> {
    (  $<ChemicalEntityOrGrouping_tes> rdf:type . * ;
       rdf:type [ <ChemicalEntityOrGrouping> ] ?
    )
}

<ChemicalGroup> CLOSED {
    (  $<ChemicalGroup_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ?
       ) ;
       rdf:type [ <ChemicalGroup> ]
    )
}

<ChemicalMixture>  (
    @<ImpreciseChemicalMixture> OR @<PreciseChemicalMixture>
)

<ChemicalMixture_struct> {
    (  $<ChemicalMixture_tes> (  &<PolyatomicEntity_tes> ;
          rdf:type [ <PolyatomicEntity> ] ?
       ) ;
       rdf:type [ <ChemicalMixture> ]
    )
}

<ChemicalSalt> CLOSED {
    (  $<ChemicalSalt_tes> (  &<PreciseChemicalMixture_tes> ;
          rdf:type [ <PreciseChemicalMixture> ] ? ;
          <elemental_charge> @linkml:Integer ? ;
          <has_cationic_component> @<CationState> ? ;
          <has_anionic_component> @<AnionState> ?
       ) ;
       rdf:type [ <ChemicalSalt> ]
    )
}

<ChemicalSaltByAnion> CLOSED {
    (  $<ChemicalSaltByAnion_tes> (  &<ChemicalSaltGroupingClass_tes> ;
          rdf:type [ <ChemicalSaltGroupingClass> ] ? ;
          <name> @linkml:String ?
       ) ;
       rdf:type [ <ChemicalSaltByAnion> ] ?
    )
}

<ChemicalSaltByCation> CLOSED {
    (  $<ChemicalSaltByCation_tes> (  &<ChemicalSaltGroupingClass_tes> ;
          rdf:type [ <ChemicalSaltGroupingClass> ] ? ;
          <name> @linkml:String ?
       ) ;
       rdf:type [ <ChemicalSaltByCation> ] ?
    )
}

<ChemicalSaltGroupingClass>  (
    CLOSED {
       (  $<ChemicalSaltGroupingClass_tes> (  &<MoleculeGroupingClass_tes> ;
             rdf:type [ <MoleculeGroupingClass> ] ? ;
             <has_anionic_component> @linkml:String ? ;
             <has_cationic_component> @linkml:String ? ;
             <name> @linkml:String ? ;
             <classifies> @<ChemicalSalt> ?
          ) ;
          rdf:type [ <ChemicalSaltGroupingClass> ] ?
       )
    } OR @<ChemicalSaltByAnion> OR @<ChemicalSaltByCation>
)

<ChiralityCenter> CLOSED {
    (  $<ChiralityCenter_tes> (  &<Stereocenter_tes> ;
          rdf:type [ <Stereocenter> ] ?
       ) ;
       rdf:type [ <ChiralityCenter> ] ?
    )
}

<Connectivity>  (
    @<FullyCovalentlyBonded> OR @<WeaklyBonded>
)

<Connectivity_struct> {
    (  $<Connectivity_tes> rdf:type . * ;
       rdf:type [ <Connectivity> ] ?
    )
}

<Copolymer> CLOSED {
    (  $<Copolymer_tes> (  &<MonomolecularPolymer_tes> ;
          rdf:type [ <MonomolecularPolymer> ] ? ;
          <has_part> @<Macromolecule> *
       ) ;
       rdf:type [ <Copolymer> ]
    )
}

<DNASequenceInterval> CLOSED {
    (  $<DNASequenceInterval_tes> (  &<NucleotideSequenceInterval_tes> ;
          rdf:type [ <NucleotideSequenceInterval> ] ?
       ) ;
       rdf:type [ <DNASequenceInterval> ]
    )
}

<Electron> CLOSED {
    (  $<Electron_tes> (  &<SubatomicParticle_tes> ;
          rdf:type [ <SubatomicParticle> ] ?
       ) ;
       rdf:type [ <Electron> ]
    )
}

<Enantiomer> CLOSED {
    (  $<Enantiomer_tes> (  &<Stereoisomer_tes> ;
          rdf:type [ <Stereoisomer> ] ? ;
          <relative_configuration> @linkml:String ? ;
          <optical_configuration> @linkml:String ? ;
          <absolute_configuration> @linkml:String ? ;
          <enantiomer_form_of> @<Molecule> ?
       ) ;
       rdf:type [ <Enantiomer> ]
    )
}

<Ester> CLOSED {
    (  $<Ester_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          <has_parent_alcohol> @<ChemicalEntity> ? ;
          <has_parent_acid> @<BronstedAcid> ?
       ) ;
       rdf:type [ <Ester> ]
    )
}

<FullyCovalentlyBonded> CLOSED {
    (  $<FullyCovalentlyBonded_tes> (  &<Connectivity_tes> ;
          rdf:type [ <Connectivity> ] ?
       ) ;
       rdf:type [ <FullyCovalentlyBonded> ] ?
    )
}

<FullySpecifiedAtom> CLOSED {
    (  $<FullySpecifiedAtom_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <elemental_charge> @linkml:Integer ? ;
          <neutron_number> @<Count> ?
       ) ;
       rdf:type [ <FullySpecifiedAtom> ]
    )
}

<FunctionalGroup> CLOSED {
    (  $<FunctionalGroup_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ? ;
          <is_substitutent_group_from> @<Molecule> ?
       ) ;
       rdf:type [ <FunctionalGroup> ]
    )
}

<GeneralAcidBaseGroupingClass> CLOSED {
    (  $<GeneralAcidBaseGroupingClass_tes> (  &<GroupingClassForAcidsOrBases_tes> ;
          rdf:type [ <GroupingClassForAcidsOrBases> ] ?
       ) ;
       rdf:type [ <GeneralAcidBaseGroupingClass> ] ?
    )
}

<GeneralizedMolecularStructureClass> CLOSED {
    (  $<GeneralizedMolecularStructureClass_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ?
       ) ;
       rdf:type [ <GeneralizedMolecularStructureClass> ] ?
    )
}

<Glycan> CLOSED {
    (  $<Glycan_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Glycan> ]
    )
}

<GroupingClass>  (
    @<AtomGroupingClass> OR @<MolecularComponentGroupingClass> OR @<MoleculeGroupingClass>
)

<GroupingClass_struct> {
    (  $<GroupingClass_tes> (  &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <subtype_of> @<GroupingClass> * ;
          <classifies> @<ChemicalEntity> ?
       ) ;
       rdf:type [ <GroupingClass> ] ?
    )
}

<GroupingClassForAcidsOrBases>  (
    @<AcidAnionGroupingClass> OR @<AcidBaseConflationClass> OR @<GeneralAcidBaseGroupingClass>
)

<GroupingClassForAcidsOrBases_struct> {
    (  $<GroupingClassForAcidsOrBases_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ? ;
          <conjugate_base_of> @<ChemicalEntity> ? ;
          <conjugate_acid_of> @<ChemicalEntity> ?
       ) ;
       rdf:type [ <GroupingClassForAcidsOrBases> ] ?
    )
}

<ImpreciseChemicalMixture> CLOSED {
    (  $<ImpreciseChemicalMixture_tes> (  &<ChemicalMixture_tes> ;
          rdf:type [ <ChemicalMixture> ] ? ;
          <has_proportional_parts> @<ProportionalPart> *
       ) ;
       rdf:type [ <ImpreciseChemicalMixture> ]
    )
}

<InchiObject>  (
    {
       (  $<InchiObject_tes> (  &<InformationalChemicalEntity_tes> ;
             rdf:type [ <InformationalChemicalEntity> ] ?
          ) ;
          rdf:type [ <InchiObject> ] ?
       )
    } OR @<StandardInchiObject>
)

<InformationalChemicalEntity>  (
    @<InchiObject> OR @<PeriodicTablePlacement>
)

<InformationalChemicalEntity_struct> {
    (  $<InformationalChemicalEntity_tes> rdf:type . * ;
       rdf:type [ <InformationalChemicalEntity> ] ?
    )
}

<IsPart> CLOSED {
    (  $<IsPart_tes> (  &<IsPartOrWhole_tes> ;
          rdf:type [ <IsPartOrWhole> ] ?
       ) ;
       rdf:type [ <IsPart> ] ?
    )
}

<IsPartOrWhole>  (
    @<IsPart> OR @<IsWhole>
)

<IsPartOrWhole_struct> {
    (  $<IsPartOrWhole_tes> rdf:type . * ;
       rdf:type [ <IsPartOrWhole> ] ?
    )
}

<IsWhole> CLOSED {
    (  $<IsWhole_tes> (  &<IsPartOrWhole_tes> ;
          rdf:type [ <IsPartOrWhole> ] ?
       ) ;
       rdf:type [ <IsWhole> ] ?
    )
}

<IsomeraseReaction> CLOSED {
    (  $<IsomeraseReaction_tes> (  &<Reaction_tes> ;
          rdf:type [ <Reaction> ] ?
       ) ;
       rdf:type [ <IsomeraseReaction> ] ?
    )
}

<Isotope> CLOSED {
    (  $<Isotope_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <neutron_number> @<Count> ? ;
          <isotope_of> @<Isotope> ? ;
          <half_life> @<NumberOfYears> ? ;
          <decay_product> @<Isotope> ? ;
          <decay_mode> @linkml:String ? ;
          <decay_energy> @linkml:String ? ;
          <mode_of_formation> @linkml:String ?
       ) ;
       rdf:type [ <Isotope> ]
    )
}

<Location>  (
    CLOSED {
       (  $<Location_tes> (  &<OwlClass_tes> ;
             rdf:type [ owl:Class ] ?
          ) ;
          rdf:type [ <Location> ] ?
       )
    } OR @<Stereocenter>
)

<Macromolecule>  (
    CLOSED {
       (  $<Macromolecule_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ? ;
             <has_submolecules> @<Molecule> *
          ) ;
          rdf:type [ <Macromolecule> ]
       )
    } OR @<Glycan> OR @<MonomolecularPolymer> OR @<Peptide> OR @<Protein>
)

<Material>  (
    CLOSED {
       (  $<Material_tes> <has_part> @<ChemicalEntity> ? ;
          rdf:type [ <Material> ] ?
       )
    } OR @<Nanostructure>
)

<Measure>  (
    CLOSED {
       (  $<Measure_tes> (  &<RelationalChemicalEntity_tes> ;
             rdf:type [ <RelationalChemicalEntity> ] ?
          ) ;
          rdf:type [ <Measure> ] ?
       )
    } OR @<MoleculePairwiseSimilarity>
)

<Moiety> CLOSED {
    (  $<Moiety_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ?
       ) ;
       rdf:type [ <Moiety> ]
    )
}

<MolecularAnion>  (
    CLOSED {
       (  $<MolecularAnion_tes> (  &<PolyatomicIon_tes> ;
             rdf:type [ <PolyatomicIon> ] ? ;
             &<AnionState_tes> ;
             rdf:type [ <AnionState> ] ?
          ) ;
          rdf:type [ <MolecularAnion> ]
       )
    } OR @<AcidBase>
)

<MolecularCation> CLOSED {
    (  $<MolecularCation_tes> (  &<PolyatomicIon_tes> ;
          rdf:type [ <PolyatomicIon> ] ? ;
          &<CationState_tes> ;
          rdf:type [ <CationState> ] ?
       ) ;
       rdf:type [ <MolecularCation> ]
    )
}

<MolecularComplex>  (
    CLOSED {
       (  $<MolecularComplex_tes> (  &<PreciseChemicalMixture_tes> ;
             rdf:type [ <PreciseChemicalMixture> ] ?
          ) ;
          rdf:type [ <MolecularComplex> ]
       )
    } OR @<SupramolecularPolymer>
)

<MolecularComponent>  (
    CLOSED {
       (  $<MolecularComponent_tes> (  &<PolyatomicEntity_tes> ;
             rdf:type [ <PolyatomicEntity> ] ?
          ) ;
          rdf:type [ <MolecularComponent> ]
       )
    } OR @<ChemicalGroup> OR @<FunctionalGroup> OR @<Moiety> OR @<PolymerPart> OR @<SequenceInterval>
)

<MolecularComponentGroupingClass> CLOSED {
    (  $<MolecularComponentGroupingClass_tes> (  &<GroupingClass_tes> ;
          rdf:type [ <GroupingClass> ] ? ;
          <subtype_of> @<MolecularComponentGroupingClass> * ;
          <classifies> @<MolecularComponent> ?
       ) ;
       rdf:type [ <MolecularComponentGroupingClass> ] ?
    )
}

<MolecularDerivativeGroupingClass> CLOSED {
    (  $<MolecularDerivativeGroupingClass_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ? ;
          <derivative_of> @<ChemicalEntity> ? ;
          <name> @linkml:String ? ;
          <classifies> @<Molecule> ?
       ) ;
       rdf:type [ <MolecularDerivativeGroupingClass> ] ?
    )
}

<MolecularSpecies> CLOSED {
    (  $<MolecularSpecies_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <MolecularSpecies> ]
    )
}

<MolecularSubsequence> CLOSED {
    (  $<MolecularSubsequence_tes> (  &<PolymerPart_tes> ;
          rdf:type [ <PolymerPart> ] ?
       ) ;
       rdf:type [ <MolecularSubsequence> ]
    )
}

<Molecule>  (
    @<BronstedAcid> OR @<Allotrope> OR @<Ester> OR @<Macromolecule> OR @<MolecularSpecies> OR @<NaturalProduct> OR
    @<NonSpeciesMolecule> OR @<PolyatomicIon> OR @<SmallMolecule> OR @<Stereoisomer> OR @<UnchargedMolecule>
)

<Molecule_struct> {
    (  $<Molecule_tes> (  &<PolyatomicEntity_tes> ;
          rdf:type [ <PolyatomicEntity> ] ? ;
          &<FullyCovalentlyBonded_tes> ;
          rdf:type [ <FullyCovalentlyBonded> ] ? ;
          <has_atom_occurrences> @<AtomOccurrence> * ;
          <has_bonds> @<AtomicBond> * ;
          <has_submolecules> @<Molecule> * ;
          <has_atoms> @<Atom> * ;
          <is_organic> @linkml:Boolean ? ;
          <has_part> @linkml:String ?
       ) ;
       rdf:type [ <Molecule> ]
    )
}

<MoleculeGroupingClass>  (
    CLOSED {
       (  $<MoleculeGroupingClass_tes> (  &<GroupingClass_tes> ;
             rdf:type [ <GroupingClass> ] ? ;
             <subtype_of> @<MoleculeGroupingClass> * ;
             <classifies> @<Molecule> ?
          ) ;
          rdf:type [ <MoleculeGroupingClass> ] ?
       )
    } OR @<ChemicalSaltGroupingClass> OR @<GeneralizedMolecularStructureClass> OR @<GroupingClassForAcidsOrBases> OR
    @<MolecularDerivativeGroupingClass> OR @<MoleculeGroupingClassDefinedByAdditionOfAGroup> OR
    @<MoleculeGroupingClassDefinedByComponents>
)

<MoleculeGroupingClassDefinedByAdditionOfAGroup> CLOSED {
    (  $<MoleculeGroupingClassDefinedByAdditionOfAGroup_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ? ;
          <has_group> @<ChemicalGroup> * ;
          <derivative_of> @<PolyatomicEntity> ?
       ) ;
       rdf:type [ <MoleculeGroupingClassDefinedByAdditionOfAGroup> ] ?
    )
}

<MoleculeGroupingClassDefinedByComponents> CLOSED {
    (  $<MoleculeGroupingClassDefinedByComponents_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ? ;
          <has_part> @<ChemicalEntityOrGrouping> ?
       ) ;
       rdf:type [ <MoleculeGroupingClassDefinedByComponents> ] ?
    )
}

<MoleculePairwiseSimilarity>  (
    CLOSED {
       (  $<MoleculePairwiseSimilarity_tes> (  &<Measure_tes> ;
             rdf:type [ <Measure> ] ? ;
             <left_molecule> @<Molecule> ? ;
             <right_molecule> @<Molecule> ? ;
             <score> @linkml:String ?
          ) ;
          rdf:type [ <MoleculePairwiseSimilarity> ] ?
       )
    } OR @<TanimotoSimilarity>
)

<MonoatomicIon>  (
    CLOSED {
       (  $<MonoatomicIon_tes> (  &<AtomIonicForm_tes> ;
             rdf:type [ <AtomIonicForm> ] ? ;
             &<Charged_tes> ;
             rdf:type [ <Charged> ] ?
          ) ;
          rdf:type [ <MonoatomicIon> ]
       )
    } OR @<AtomAnion> OR @<AtomCation>
)

<Monomer> CLOSED {
    (  $<Monomer_tes> (  &<PolymerPart_tes> ;
          rdf:type [ <PolymerPart> ] ?
       ) ;
       rdf:type [ <Monomer> ]
    )
}

<MonomolecularPolymer>  (
    CLOSED {
       (  $<MonomolecularPolymer_tes> (  &<Macromolecule_tes> ;
             rdf:type [ <Macromolecule> ] ? ;
             <polymer_of> @<Macromolecule> ?
          ) ;
          rdf:type [ <MonomolecularPolymer> ]
       )
    } OR @<Copolymer>
)

<Nanostructure> CLOSED {
    (  $<Nanostructure_tes> (  &<Material_tes> ;
          rdf:type [ <Material> ] ? ;
          <has_morphological_category> @<NanostructureMorphologyEnum> ?
       ) ;
       rdf:type [ <Nanostructure> ] ?
    )
}

<NaturalProduct> CLOSED {
    (  $<NaturalProduct_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <NaturalProduct> ]
    )
}

<Neutron> CLOSED {
    (  $<Neutron_tes> (  &<Nucleon_tes> ;
          rdf:type [ <Nucleon> ] ?
       ) ;
       rdf:type [ <Neutron> ]
    )
}

<NonSpeciesMolecule> CLOSED {
    (  $<NonSpeciesMolecule_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <NonSpeciesMolecule> ]
    )
}

<Nucleon>  (
    CLOSED {
       (  $<Nucleon_tes> (  &<SubatomicParticle_tes> ;
             rdf:type [ <SubatomicParticle> ] ?
          ) ;
          rdf:type [ <Nucleon> ]
       )
    } OR @<Neutron> OR @<Proton>
)

<NucleotideSequenceInterval>  (
    CLOSED {
       (  $<NucleotideSequenceInterval_tes> (  &<SequenceInterval_tes> ;
             rdf:type [ <SequenceInterval> ] ? ;
             <has_sequence_representation> @<DNASequenceString> ?
          ) ;
          rdf:type [ <NucleotideSequenceInterval> ]
       )
    } OR @<DNASequenceInterval> OR @<RNASequenceInterval>
)

<Nuclide>  (
    CLOSED {
       (  $<Nuclide_tes> (  &<Atom_tes> ;
             rdf:type [ <Atom> ] ? ;
             <energy_level> @linkml:String ?
          ) ;
          rdf:type [ <Nuclide> ]
       )
    } OR @<Radionuclide>
)

<OwlClass> {
    (  $<OwlClass_tes> rdf:type . * ;
       rdf:type [ owl:Class ] ?
    )
}

<Peptide> CLOSED {
    (  $<Peptide_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Peptide> ]
    )
}

<PeriodicTableBlock> CLOSED {
    (  $<PeriodicTableBlock_tes> (  &<PeriodicTablePlacement_tes> ;
          rdf:type [ <PeriodicTablePlacement> ] ? ;
          <type> @<PeriodicTableBlockEnum> ?
       ) ;
       rdf:type [ <PeriodicTableBlock> ] ?
    )
}

<PeriodicTablePlacement>  (
    {
       (  $<PeriodicTablePlacement_tes> (  &<InformationalChemicalEntity_tes> ;
             rdf:type [ <InformationalChemicalEntity> ] ?
          ) ;
          rdf:type [ <PeriodicTablePlacement> ] ?
       )
    } OR @<PeriodicTableBlock>
)

<PolyatomicEntity>  (
    @<ChemicalMixture> OR @<MolecularComponent> OR @<Molecule>
)

<PolyatomicEntity_struct> {
    (  $<PolyatomicEntity_tes> (  &<ChemicalEntity_tes> ;
          rdf:type [ <ChemicalEntity> ] ?
       ) ;
       rdf:type [ <PolyatomicEntity> ]
    )
}

<PolyatomicIon>  (
    CLOSED {
       (  $<PolyatomicIon_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ? ;
             &<Charged_tes> ;
             rdf:type [ <Charged> ] ? ;
             <conjugate_base_of> @<ChemicalEntity> ? ;
             <conjugate_acid_of> @<ChemicalEntity> ? ;
             <elemental_charge> @linkml:Integer ?
          ) ;
          rdf:type [ <PolyatomicIon> ]
       )
    } OR @<MolecularAnion> OR @<MolecularCation>
)

<PolymerPart>  (
    CLOSED {
       (  $<PolymerPart_tes> (  &<MolecularComponent_tes> ;
             rdf:type [ <MolecularComponent> ] ?
          ) ;
          rdf:type [ <PolymerPart> ]
       )
    } OR @<MolecularSubsequence> OR @<Monomer>
)

<PreciseChemicalMixture>  (
    @<ChemicalSalt> OR @<MolecularComplex> OR @<RacemicMixture>
)

<PreciseChemicalMixture_struct> {
    (  $<PreciseChemicalMixture_tes> (  &<ChemicalMixture_tes> ;
          rdf:type [ <ChemicalMixture> ] ? ;
          &<WeaklyBonded_tes> ;
          rdf:type [ <WeaklyBonded> ] ?
       ) ;
       rdf:type [ <PreciseChemicalMixture> ]
    )
}

<ProportionalPart> CLOSED {
    (  $<ProportionalPart_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          <has_role> @<IngredientRoleEnum> ? ;
          <composed_of> @<ChemicalEntity> ? ;
          <minimal_percentage> @linkml:Float ? ;
          <maximum_percentage> @linkml:Float ?
       ) ;
       rdf:type [ <ProportionalPart> ] ?
    )
}

<Protein> CLOSED {
    (  $<Protein_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Protein> ]
    )
}

<Proton> CLOSED {
    (  $<Proton_tes> (  &<Nucleon_tes> ;
          rdf:type [ <Nucleon> ] ?
       ) ;
       rdf:type [ <Proton> ]
    )
}

<RacemicMixture> CLOSED {
    (  $<RacemicMixture_tes> (  &<PreciseChemicalMixture_tes> ;
          rdf:type [ <PreciseChemicalMixture> ] ? ;
          <has_left_enantiomer> @<Enantiomer> ;
          <has_right_enantiomer> @<Enantiomer>
       ) ;
       rdf:type [ <RacemicMixture> ]
    )
}

<Radionuclide> CLOSED {
    (  $<Radionuclide_tes> (  &<Nuclide_tes> ;
          rdf:type [ <Nuclide> ] ?
       ) ;
       rdf:type [ <Radionuclide> ]
    )
}

<Reaction>  (
    CLOSED {
       (  $<Reaction_tes> (  <left_participants> @<ReactionParticipant> * ;
             <right_participants> @<ReactionParticipant> * ;
             <direction> @linkml:String ? ;
             <smarts_string> @linkml:String ? ;
             <is_diastereoselective> @linkml:Boolean ? ;
             <is_stereo> @linkml:Boolean ? ;
             <is_balanced> @linkml:Boolean ? ;
             <is_transport> @linkml:Boolean ? ;
             <is_fully_characterized> @linkml:Boolean ? ;
             <reaction_center> @linkml:String ? ;
             <description> @linkml:String ?
          ) ;
          rdf:type [ <Reaction> ] ?
       )
    } OR @<IsomeraseReaction>
)

<ReactionParticipant> CLOSED {
    (  $<ReactionParticipant_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          <participant> @<ChemicalEntity> ? ;
          <stoichiometry> @linkml:Integer ?
       ) ;
       rdf:type [ <ReactionParticipant> ] ?
    )
}

<RelationalChemicalEntity>  (
    @<AtomOccurrence> OR @<AtomicBond> OR @<Measure> OR @<ProportionalPart> OR @<ReactionParticipant>
)

<RelationalChemicalEntity_struct> {
    (  $<RelationalChemicalEntity_tes> (  &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ?
       ) ;
       rdf:type [ <RelationalChemicalEntity> ] ?
    )
}

<RNASequenceInterval> CLOSED {
    (  $<RNASequenceInterval_tes> (  &<NucleotideSequenceInterval_tes> ;
          rdf:type [ <NucleotideSequenceInterval> ] ?
       ) ;
       rdf:type [ <RNASequenceInterval> ]
    )
}

<SequenceInterval>  (
    @<AminoAcidSequenceInterval> OR @<NucleotideSequenceInterval>
)

<SequenceInterval_struct> {
    (  $<SequenceInterval_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ? ;
          <has_sequence_representation> @<SequenceString> ?
       ) ;
       rdf:type [ <SequenceInterval> ]
    )
}

<SmallMolecule> CLOSED {
    (  $<SmallMolecule_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <SmallMolecule> ]
    )
}

<StandardInchiObject> CLOSED {
    (  $<StandardInchiObject_tes> (  &<InchiObject_tes> ;
          rdf:type [ <InchiObject> ] ? ;
          <inchi_version_string> @linkml:String ;
          <inchi_chemical_sublayer> @linkml:String ;
          <inchi_atom_connections_sublayer> @linkml:String ? ;
          <inchi_hydrogen_connections_sublayer> @linkml:String ? ;
          <inchi_charge_sublayer> @linkml:String ? ;
          <inchi_proton_sublayer> @linkml:String ? ;
          <inchi_stereochemical_double_bond_sublayer> @linkml:String ? ;
          <inchi_tetrahedral_stereochemical_sublayer> @linkml:String ? ;
          <inchi_stereochemical_type_sublayer> @linkml:String ? ;
          <inchi_isotopic_layer> @linkml:String ?
       ) ;
       rdf:type [ <StandardInchiObject> ] ?
    )
}

<State>  (
    {
       (  $<State_tes> rdf:type . * ;
          rdf:type [ <State> ] ?
       )
    } OR @<ChargeState>
)

<Stereocenter>  (
    CLOSED {
       (  $<Stereocenter_tes> (  &<Location_tes> ;
             rdf:type [ <Location> ] ? ;
             &<OwlClass_tes> ;
             rdf:type [ owl:Class ] ?
          ) ;
          rdf:type [ <Stereocenter> ] ?
       )
    } OR @<ChiralityCenter>
)

<Stereoisomer>  (
    CLOSED {
       (  $<Stereoisomer_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ?
          ) ;
          rdf:type [ <Stereoisomer> ]
       )
    } OR @<Enantiomer>
)

<SubatomicParticle>  (
    CLOSED {
       (  $<SubatomicParticle_tes> (  &<ChemicalEntity_tes> ;
             rdf:type [ <ChemicalEntity> ] ?
          ) ;
          rdf:type [ <SubatomicParticle> ]
       )
    } OR @<Electron> OR @<Nucleon>
)

<SupramolecularPolymer> CLOSED {
    (  $<SupramolecularPolymer_tes> (  &<MolecularComplex_tes> ;
          rdf:type [ <MolecularComplex> ] ?
       ) ;
       rdf:type [ <SupramolecularPolymer> ]
    )
}

<TanimotoSimilarity> CLOSED {
    (  $<TanimotoSimilarity_tes> (  &<MoleculePairwiseSimilarity_tes> ;
          rdf:type [ <MoleculePairwiseSimilarity> ] ? ;
          <score> @linkml:Float ?
       ) ;
       rdf:type [ <TanimotoSimilarity> ] ?
    )
}

<Uncharged> {
    (  $<Uncharged_tes> (  &<ChargeState_tes> ;
          rdf:type [ <ChargeState> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <Uncharged> ] ?
    )
}

<UnchargedAtom> CLOSED {
    (  $<UnchargedAtom_tes> (  &<AtomIonicForm_tes> ;
          rdf:type [ <AtomIonicForm> ] ? ;
          &<Uncharged_tes> ;
          rdf:type [ <Uncharged> ] ?
       ) ;
       rdf:type [ <UnchargedAtom> ]
    )
}

<UnchargedMolecule> CLOSED {
    (  $<UnchargedMolecule_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          &<Uncharged_tes> ;
          rdf:type [ <Uncharged> ] ? ;
          <elemental_charge> @linkml:Integer ?
       ) ;
       rdf:type [ <UnchargedMolecule> ]
    )
}

<WeaklyBonded> CLOSED {
    (  $<WeaklyBonded_tes> (  &<Connectivity_tes> ;
          rdf:type [ <Connectivity> ] ?
       ) ;
       rdf:type [ <WeaklyBonded> ] ?
    )
}



