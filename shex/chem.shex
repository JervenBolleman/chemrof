BASE <https://w3id.org/chemont/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX metatype: <https://w3id.org/biolink/biolinkml/meta/types/>


<Count> xsd:int

<NumberOfYears> xsd:int

<ChemicalEncoding> xsd:string

metatype:String xsd:string

metatype:Integer xsd:integer

metatype:Boolean xsd:boolean

metatype:Float xsd:float

metatype:Double xsd:double

metatype:Decimal xsd:decimal

metatype:Time xsd:dateTime

metatype:Date xsd:date

metatype:Datetime xsd:dateTime

metatype:Uriorcurie IRI

metatype:Uri IRI

metatype:Ncname xsd:string

metatype:Objectidentifier IRI

metatype:Nodeidentifier NONLITERAL

<AcidFormOfConjugatedAcid> CLOSED {
    (  $<AcidFormOfConjugatedAcid_tes> (  &<PolyatomicIon_tes> ;
          rdf:type [ <PolyatomicIon> ] ?
       ) ;
       rdf:type [ <AcidFormOfConjugatedAcid> ]
    )
}

<Allotrope> CLOSED {
    (  $<Allotrope_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          <allotropic_analog_of> @<ChemicalElement> ;
          <has_bonding_structure> @metatype:String
       ) ;
       rdf:type [ <Allotrope> ]
    )
}

<AnionState> {
    (  $<AnionState_tes> (  &<Charged_tes> ;
          rdf:type [ <Charged> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <AnionState> ] ?
    )
}

<Atom>  (
    @<AtomIonicForm> OR @<ChemicalElement> OR @<FullySpecifiedAtom> OR @<Isotope> OR @<Nuclide>
)

<Atom_struct> {
    (  $<Atom_tes> (  &<ChemicalEntity_tes> ;
          rdf:type [ <ChemicalEntity> ] ? ;
          <atomic_number> @<Count> ? ;
          <symbol> @metatype:String ? ;
          <name> @metatype:String ? ;
          <has_part> @<SubatomicParticle> ?
       ) ;
       rdf:type [ <Atom> ]
    )
}

<AtomAnion> CLOSED {
    (  $<AtomAnion_tes> (  &<MonoatomicIon_tes> ;
          rdf:type [ <MonoatomicIon> ] ? ;
          &<AnionState_tes> ;
          rdf:type [ <AnionState> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <AtomAnion> ]
    )
}

<AtomCation> CLOSED {
    (  $<AtomCation_tes> (  &<MonoatomicIon_tes> ;
          rdf:type [ <MonoatomicIon> ] ? ;
          &<CationState_tes> ;
          rdf:type [ <CationState> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <AtomCation> ]
    )
}

<AtomGroupingClass> CLOSED {
    (  $<AtomGroupingClass_tes> (  &<GroupingClass_tes> ;
          rdf:type [ <GroupingClass> ] ? ;
          <subtype_of> @<MoleculeGroupingClass> * ;
          <classifies> @<Atom> ?
       ) ;
       rdf:type [ <AtomGroupingClass> ] ?
    )
}

<AtomIonicForm>  (
    @<MonoatomicIon> OR @<UnchargedAtom>
)

<AtomIonicForm_struct> {
    (  $<AtomIonicForm_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <elemental_charge> @metatype:Integer ? ;
          <elemental_change> @metatype:String ?
       ) ;
       rdf:type [ <AtomIonicForm> ]
    )
}

<AtomOccurrence> CLOSED {
    (  $<AtomOccurrence_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <occurrence_of> @<Atom> ;
          <valence> @metatype:Integer ? ;
          <oxidation_number> @metatype:Integer ? ;
          <formal_charge> @metatype:Integer ? ;
          <coordination_number> @metatype:Integer ?
       ) ;
       rdf:type [ <AtomOccurrence> ] ?
    )
}

<AtomicBond> CLOSED {
    (  $<AtomicBond_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <has_atom_occurrences> @<AtomOccurrence> * ;
          <bond_order> @metatype:Integer ? ;
          <bond_type> @<BondTypeEnum> ? ;
          <bond_length_in_angstroms> @metatype:Float ? ;
          <bond_angle> @metatype:Float ? ;
          <torsional_angle> @metatype:Float ?
       ) ;
       rdf:type [ <AtomicBond> ] ?
    )
}

<BaseFormOfConjugatedAcid> CLOSED {
    (  $<BaseFormOfConjugatedAcid_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <BaseFormOfConjugatedAcid> ]
    )
}

<CationState> {
    (  $<CationState_tes> (  &<Charged_tes> ;
          rdf:type [ <Charged> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <CationState> ] ?
    )
}

<ChargeState>  (
    @<Charged> OR @<Uncharged>
)

<ChargeState_struct> {
    (  $<ChargeState_tes> (  &<State_tes> ;
          rdf:type [ <State> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <ChargeState> ] ?
    )
}

<Charged>  (
    @<AnionState> OR @<CationState>
)

<Charged_struct> {
    (  $<Charged_tes> (  &<ChargeState_tes> ;
          rdf:type [ <ChargeState> ] ?
       ) ;
       rdf:type [ <Charged> ] ?
    )
}

<ChemicalElement> CLOSED {
    (  $<ChemicalElement_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <symbol> @metatype:String ? ;
          <periodic_table_group> @metatype:String ? ;
          <periodic_table_block> @metatype:String ? ;
          <boiling_point_in_celcius> @metatype:Float ? ;
          <melting_point_in_celcius> @metatype:Float ? ;
          <standard_atomic_weight> @metatype:Float ? ;
          <electron_configuration> @metatype:String ? ;
          <has_stereocenter> @<Stereocenter> *
       ) ;
       rdf:type [ <ChemicalElement> ]
    )
}

<ChemicalEntity>  (
    @<Atom> OR @<PolyatomicEntity> OR @<RacemicMixture> OR @<SubatomicParticle>
)

<ChemicalEntity_struct> {
    (  $<ChemicalEntity_tes> (  &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <is_radical> @metatype:Boolean ? ;
          <has_standard_inchi_object> @<StandardInchiObject> ?
       ) ;
       rdf:type [ <ChemicalEntity> ]
    )
}

<ChemicalGroup> CLOSED {
    (  $<ChemicalGroup_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ?
       ) ;
       rdf:type [ <ChemicalGroup> ]
    )
}

<ChiralityCenter> CLOSED {
    (  $<ChiralityCenter_tes> (  &<Stereocenter_tes> ;
          rdf:type [ <Stereocenter> ] ?
       ) ;
       rdf:type [ <ChiralityCenter> ] ?
    )
}

<ConjugatedAcid> CLOSED {
    (  $<ConjugatedAcid_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          <acidity> @metatype:Float ? ;
          <hard_or_soft> @<HardOrSoftEnum> ?
       ) ;
       rdf:type [ <ConjugatedAcid> ]
    )
}

<Copolymer> CLOSED {
    (  $<Copolymer_tes> (  &<MonomolecularPolymer_tes> ;
          rdf:type [ <MonomolecularPolymer> ] ? ;
          <has_part> @<Macromolecule> *
       ) ;
       rdf:type [ <Copolymer> ]
    )
}

<Electron> CLOSED {
    (  $<Electron_tes> (  &<SubatomicParticle_tes> ;
          rdf:type [ <SubatomicParticle> ] ?
       ) ;
       rdf:type [ <Electron> ]
    )
}

<Enantiomer> CLOSED {
    (  $<Enantiomer_tes> (  &<Stereoisomer_tes> ;
          rdf:type [ <Stereoisomer> ] ? ;
          <relative_configuration> @metatype:String ? ;
          <optical_configuration> @metatype:String ? ;
          <absolute_configuration> @metatype:String ? ;
          <enantiomer_form_of> @<Molecule> ?
       ) ;
       rdf:type [ <Enantiomer> ]
    )
}

<FullySpecifiedAtom> CLOSED {
    (  $<FullySpecifiedAtom_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <elemental_charge> @metatype:Integer ? ;
          <neutron_number> @<Count> ?
       ) ;
       rdf:type [ <FullySpecifiedAtom> ]
    )
}

<FunctionalGroup> CLOSED {
    (  $<FunctionalGroup_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ? ;
          <is_substitutent_group_from> @<Molecule> ?
       ) ;
       rdf:type [ <FunctionalGroup> ]
    )
}

<GeneralizedMolecularStructure> CLOSED {
    (  $<GeneralizedMolecularStructure_tes> (  &<MoleculeGroupingClass_tes> ;
          rdf:type [ <MoleculeGroupingClass> ] ?
       ) ;
       rdf:type [ <GeneralizedMolecularStructure> ] ?
    )
}

<Glycan> CLOSED {
    (  $<Glycan_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Glycan> ]
    )
}

<GroupingClass>  (
    @<AtomGroupingClass> OR @<MoleculeGroupingClass>
)

<GroupingClass_struct> {
    (  $<GroupingClass_tes> (  &<OwlClass_tes> ;
          rdf:type [ owl:Class ] ? ;
          <subtype_of> @<GroupingClass> * ;
          <classifies> @<ChemicalEntity> ?
       ) ;
       rdf:type [ <GroupingClass> ] ?
    )
}

<InchiObject>  (
    {
       (  $<InchiObject_tes> (  &<InformationalChemicalEntity_tes> ;
             rdf:type [ <InformationalChemicalEntity> ] ?
          ) ;
          rdf:type [ <InchiObject> ] ?
       )
    } OR @<StandardInchiObject>
)

<InformationalChemicalEntity>  (
    {
       (  $<InformationalChemicalEntity_tes> rdf:type . * ;
          rdf:type [ <InformationalChemicalEntity> ] ?
       )
    } OR @<InchiObject>
)

<IsomeraseReaction> CLOSED {
    (  $<IsomeraseReaction_tes> (  &<Reaction_tes> ;
          rdf:type [ <Reaction> ] ?
       ) ;
       rdf:type [ <IsomeraseReaction> ] ?
    )
}

<Isotope> CLOSED {
    (  $<Isotope_tes> (  &<Atom_tes> ;
          rdf:type [ <Atom> ] ? ;
          <neutron_number> @<Count> ? ;
          <isotope_of> @<Isotope> ? ;
          <half_life> @<NumberOfYears> ? ;
          <decay_product> @<Isotope> ? ;
          <decay_mode> @metatype:String ? ;
          <decay_energy> @metatype:String ? ;
          <mode_of_formation> @metatype:String ?
       ) ;
       rdf:type [ <Isotope> ]
    )
}

<Location>  (
    CLOSED {
       (  $<Location_tes> (  &<OwlClass_tes> ;
             rdf:type [ owl:Class ] ?
          ) ;
          rdf:type [ <Location> ] ?
       )
    } OR @<Stereocenter>
)

<Macromolecule>  (
    CLOSED {
       (  $<Macromolecule_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ? ;
             <has_submolecules> @<Molecule> *
          ) ;
          rdf:type [ <Macromolecule> ]
       )
    } OR @<Glycan> OR @<MonomolecularPolymer> OR @<Peptide> OR @<Protein>
)

<Measure>  (
    CLOSED {
       (  $<Measure_tes> (  &<RelationalChemicalEntity_tes> ;
             rdf:type [ <RelationalChemicalEntity> ] ?
          ) ;
          rdf:type [ <Measure> ] ?
       )
    } OR @<MoleculePairwiseSimilarity>
)

<Moiety> CLOSED {
    (  $<Moiety_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ?
       ) ;
       rdf:type [ <Moiety> ]
    )
}

<MolecularAnion> CLOSED {
    (  $<MolecularAnion_tes> (  &<PolyatomicIon_tes> ;
          rdf:type [ <PolyatomicIon> ] ? ;
          &<AnionState_tes> ;
          rdf:type [ <AnionState> ] ?
       ) ;
       rdf:type [ <MolecularAnion> ]
    )
}

<MolecularCation> CLOSED {
    (  $<MolecularCation_tes> (  &<PolyatomicIon_tes> ;
          rdf:type [ <PolyatomicIon> ] ? ;
          &<CationState_tes> ;
          rdf:type [ <CationState> ] ?
       ) ;
       rdf:type [ <MolecularCation> ]
    )
}

<MolecularComplex>  (
    CLOSED {
       (  $<MolecularComplex_tes> (  &<PolyatomicEntity_tes> ;
             rdf:type [ <PolyatomicEntity> ] ?
          ) ;
          rdf:type [ <MolecularComplex> ]
       )
    } OR @<SupramolecularPolymer>
)

<MolecularComponent>  (
    CLOSED {
       (  $<MolecularComponent_tes> (  &<PolyatomicEntity_tes> ;
             rdf:type [ <PolyatomicEntity> ] ?
          ) ;
          rdf:type [ <MolecularComponent> ]
       )
    } OR @<ChemicalGroup> OR @<FunctionalGroup> OR @<Moiety> OR @<PolymerPart> OR @<SequenceOfElements>
)

<MolecularSpecies> CLOSED {
    (  $<MolecularSpecies_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <MolecularSpecies> ]
    )
}

<MolecularSubsequence> CLOSED {
    (  $<MolecularSubsequence_tes> (  &<PolymerPart_tes> ;
          rdf:type [ <PolymerPart> ] ?
       ) ;
       rdf:type [ <MolecularSubsequence> ]
    )
}

<Molecule>  (
    @<Allotrope> OR @<BaseFormOfConjugatedAcid> OR @<ConjugatedAcid> OR @<Macromolecule> OR @<MolecularSpecies> OR
    @<NaturalProduct> OR @<NonSpeciesMolecule> OR @<PolyatomicIon> OR @<Stereoisomer> OR @<UnchargedMolecule>
)

<Molecule_struct> {
    (  $<Molecule_tes> (  &<PolyatomicEntity_tes> ;
          rdf:type [ <PolyatomicEntity> ] ? ;
          <has_atom_occurrences> @<AtomOccurrence> * ;
          <has_bonds> @<AtomicBond> * ;
          <has_submolecules> @<Molecule> * ;
          <has_atoms> @<Atom> * ;
          <has_part> @metatype:String ?
       ) ;
       rdf:type [ <Molecule> ]
    )
}

<MoleculeGroupingClass>  (
    CLOSED {
       (  $<MoleculeGroupingClass_tes> (  &<GroupingClass_tes> ;
             rdf:type [ <GroupingClass> ] ? ;
             <subtype_of> @<MoleculeGroupingClass> * ;
             <classifies> @<Molecule> ?
          ) ;
          rdf:type [ <MoleculeGroupingClass> ] ?
       )
    } OR @<GeneralizedMolecularStructure>
)

<MoleculePairwiseSimilarity>  (
    CLOSED {
       (  $<MoleculePairwiseSimilarity_tes> (  &<Measure_tes> ;
             rdf:type [ <Measure> ] ? ;
             <left_molecule> @<Molecule> ? ;
             <right_molecule> @<Molecule> ? ;
             <score> @metatype:String ?
          ) ;
          rdf:type [ <MoleculePairwiseSimilarity> ] ?
       )
    } OR @<TanimotoSimilarity>
)

<MonoatomicIon>  (
    CLOSED {
       (  $<MonoatomicIon_tes> (  &<AtomIonicForm_tes> ;
             rdf:type [ <AtomIonicForm> ] ? ;
             &<Charged_tes> ;
             rdf:type [ <Charged> ] ?
          ) ;
          rdf:type [ <MonoatomicIon> ]
       )
    } OR @<AtomAnion> OR @<AtomCation>
)

<Monomer> CLOSED {
    (  $<Monomer_tes> (  &<PolymerPart_tes> ;
          rdf:type [ <PolymerPart> ] ?
       ) ;
       rdf:type [ <Monomer> ]
    )
}

<MonomolecularPolymer>  (
    CLOSED {
       (  $<MonomolecularPolymer_tes> (  &<Macromolecule_tes> ;
             rdf:type [ <Macromolecule> ] ? ;
             <polymer_of> @<Macromolecule> ?
          ) ;
          rdf:type [ <MonomolecularPolymer> ]
       )
    } OR @<Copolymer>
)

<NaturalProduct> CLOSED {
    (  $<NaturalProduct_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <NaturalProduct> ]
    )
}

<Neutron> CLOSED {
    (  $<Neutron_tes> (  &<Nucleon_tes> ;
          rdf:type [ <Nucleon> ] ?
       ) ;
       rdf:type [ <Neutron> ]
    )
}

<NonSpeciesMolecule> CLOSED {
    (  $<NonSpeciesMolecule_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ?
       ) ;
       rdf:type [ <NonSpeciesMolecule> ]
    )
}

<Nucleon>  (
    CLOSED {
       (  $<Nucleon_tes> (  &<SubatomicParticle_tes> ;
             rdf:type [ <SubatomicParticle> ] ?
          ) ;
          rdf:type [ <Nucleon> ]
       )
    } OR @<Neutron> OR @<Proton>
)

<Nuclide>  (
    CLOSED {
       (  $<Nuclide_tes> (  &<Atom_tes> ;
             rdf:type [ <Atom> ] ? ;
             <energy_level> @metatype:String ?
          ) ;
          rdf:type [ <Nuclide> ]
       )
    } OR @<Radionuclide>
)

<OwlClass> {
    (  $<OwlClass_tes> rdf:type . * ;
       rdf:type [ owl:Class ] ?
    )
}

<Peptide> CLOSED {
    (  $<Peptide_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Peptide> ]
    )
}

<PolyatomicEntity>  (
    @<MolecularComplex> OR @<MolecularComponent> OR @<Molecule> OR @<Salt>
)

<PolyatomicEntity_struct> {
    (  $<PolyatomicEntity_tes> (  &<ChemicalEntity_tes> ;
          rdf:type [ <ChemicalEntity> ] ?
       ) ;
       rdf:type [ <PolyatomicEntity> ]
    )
}

<PolyatomicIon>  (
    CLOSED {
       (  $<PolyatomicIon_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ? ;
             &<Charged_tes> ;
             rdf:type [ <Charged> ] ? ;
             <elemental_charge> @metatype:Integer ?
          ) ;
          rdf:type [ <PolyatomicIon> ]
       )
    } OR @<AcidFormOfConjugatedAcid> OR @<MolecularAnion> OR @<MolecularCation>
)

<PolymerPart>  (
    CLOSED {
       (  $<PolymerPart_tes> (  &<MolecularComponent_tes> ;
             rdf:type [ <MolecularComponent> ] ?
          ) ;
          rdf:type [ <PolymerPart> ]
       )
    } OR @<MolecularSubsequence> OR @<Monomer>
)

<Protein> CLOSED {
    (  $<Protein_tes> (  &<Macromolecule_tes> ;
          rdf:type [ <Macromolecule> ] ?
       ) ;
       rdf:type [ <Protein> ]
    )
}

<Proton> CLOSED {
    (  $<Proton_tes> (  &<Nucleon_tes> ;
          rdf:type [ <Nucleon> ] ?
       ) ;
       rdf:type [ <Proton> ]
    )
}

<RacemicMixture> CLOSED {
    (  $<RacemicMixture_tes> (  &<ChemicalEntity_tes> ;
          rdf:type [ <ChemicalEntity> ] ? ;
          <has_left_enantiomer> @<Enantiomer> ;
          <has_right_enantiomer> @<Enantiomer>
       ) ;
       rdf:type [ <RacemicMixture> ]
    )
}

<Radionuclide> CLOSED {
    (  $<Radionuclide_tes> (  &<Nuclide_tes> ;
          rdf:type [ <Nuclide> ] ?
       ) ;
       rdf:type [ <Radionuclide> ]
    )
}

<Reaction>  (
    CLOSED {
       (  $<Reaction_tes> (  <left_participants> @<ReactionParticipant> * ;
             <right_participants> @<ReactionParticipant> * ;
             <direction> @metatype:String ? ;
             <smarts_string> @metatype:String ? ;
             <is_diastereoselective> @metatype:Boolean ? ;
             <is_stereo> @metatype:Boolean ? ;
             <is_balanced> @metatype:Boolean ? ;
             <is_transport> @metatype:Boolean ? ;
             <is_fully_characterized> @metatype:Boolean ? ;
             <reaction_center> @metatype:String ? ;
             <description> @metatype:String ?
          ) ;
          rdf:type [ <Reaction> ] ?
       )
    } OR @<IsomeraseReaction>
)

<ReactionParticipant> CLOSED {
    (  $<ReactionParticipant_tes> (  &<RelationalChemicalEntity_tes> ;
          rdf:type [ <RelationalChemicalEntity> ] ? ;
          <participant> @<ChemicalEntity> ? ;
          <stoichiometry> @metatype:Integer ?
       ) ;
       rdf:type [ <ReactionParticipant> ] ?
    )
}

<RelationalChemicalEntity>  (
    CLOSED {
       (  $<RelationalChemicalEntity_tes> (  &<OwlClass_tes> ;
             rdf:type [ owl:Class ] ?
          ) ;
          rdf:type [ <RelationalChemicalEntity> ] ?
       )
    } OR @<AtomOccurrence> OR @<AtomicBond> OR @<Measure> OR @<ReactionParticipant>
)

<Salt> CLOSED {
    (  $<Salt_tes> (  &<PolyatomicEntity_tes> ;
          rdf:type [ <PolyatomicEntity> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <Salt> ]
    )
}

<SequenceOfElements> CLOSED {
    (  $<SequenceOfElements_tes> (  &<MolecularComponent_tes> ;
          rdf:type [ <MolecularComponent> ] ?
       ) ;
       rdf:type [ <SequenceOfElements> ]
    )
}

<StandardInchiObject> CLOSED {
    (  $<StandardInchiObject_tes> (  &<InchiObject_tes> ;
          rdf:type [ <InchiObject> ] ? ;
          <inchi_version_string> @metatype:String ;
          <inchi_chemical_sublayer> @metatype:String ;
          <inchi_atom_connections_sublayer> @metatype:String ? ;
          <inchi_hydrogen_connections_sublayer> @metatype:String ? ;
          <inchi_charge_sublayer> @metatype:String ? ;
          <inchi_proton_sublayer> @metatype:String ? ;
          <inchi_stereochemical_double_bond_sublayer> @metatype:String ? ;
          <inchi_tetrahedral_stereochemical_sublayer> @metatype:String ? ;
          <inchi_stereochemical_type_sublayer> @metatype:String ? ;
          <inchi_isotopic_layer> @metatype:String ?
       ) ;
       rdf:type [ <StandardInchiObject> ] ?
    )
}

<State>  (
    {
       (  $<State_tes> rdf:type . * ;
          rdf:type [ <State> ] ?
       )
    } OR @<ChargeState>
)

<Stereocenter>  (
    CLOSED {
       (  $<Stereocenter_tes> (  &<Location_tes> ;
             rdf:type [ <Location> ] ? ;
             &<OwlClass_tes> ;
             rdf:type [ owl:Class ] ?
          ) ;
          rdf:type [ <Stereocenter> ] ?
       )
    } OR @<ChiralityCenter>
)

<Stereoisomer>  (
    CLOSED {
       (  $<Stereoisomer_tes> (  &<Molecule_tes> ;
             rdf:type [ <Molecule> ] ?
          ) ;
          rdf:type [ <Stereoisomer> ]
       )
    } OR @<Enantiomer>
)

<SubatomicParticle>  (
    CLOSED {
       (  $<SubatomicParticle_tes> (  &<ChemicalEntity_tes> ;
             rdf:type [ <ChemicalEntity> ] ?
          ) ;
          rdf:type [ <SubatomicParticle> ]
       )
    } OR @<Electron> OR @<Nucleon>
)

<SupramolecularPolymer> CLOSED {
    (  $<SupramolecularPolymer_tes> (  &<MolecularComplex_tes> ;
          rdf:type [ <MolecularComplex> ] ?
       ) ;
       rdf:type [ <SupramolecularPolymer> ]
    )
}

<TanimotoSimilarity> CLOSED {
    (  $<TanimotoSimilarity_tes> (  &<MoleculePairwiseSimilarity_tes> ;
          rdf:type [ <MoleculePairwiseSimilarity> ] ? ;
          <score> @metatype:Float ?
       ) ;
       rdf:type [ <TanimotoSimilarity> ] ?
    )
}

<Uncharged> {
    (  $<Uncharged_tes> (  &<ChargeState_tes> ;
          rdf:type [ <ChargeState> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <Uncharged> ] ?
    )
}

<UnchargedAtom> CLOSED {
    (  $<UnchargedAtom_tes> (  &<AtomIonicForm_tes> ;
          rdf:type [ <AtomIonicForm> ] ? ;
          &<Uncharged_tes> ;
          rdf:type [ <Uncharged> ] ?
       ) ;
       rdf:type [ <UnchargedAtom> ]
    )
}

<UnchargedMolecule> CLOSED {
    (  $<UnchargedMolecule_tes> (  &<Molecule_tes> ;
          rdf:type [ <Molecule> ] ? ;
          &<Uncharged_tes> ;
          rdf:type [ <Uncharged> ] ? ;
          <elemental_charge> @metatype:Integer ?
       ) ;
       rdf:type [ <UnchargedMolecule> ]
    )
}



