type AcidFormOfConjugatedAcid
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    elementalCharge: Integer
  }

type Allotrope
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    allotropicAnalogOf: ChemicalElement!
    hasBondingStructure: String!
  }

interface AnionState
  {
    elementalCharge: Integer
  }

interface Atom
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
  }

type AtomAnion implements AnionState
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalChange: String
    elementalCharge: Integer
  }

type AtomCation implements CationState
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalChange: String
    elementalCharge: Integer
  }

type AtomGroupingClass
  {
    owlSubclassOf: OwlClass
    subtypeOf: [MoleculeGroupingClass]
    classifies: Atom
  }

interface AtomIonicForm
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalCharge: Integer
    elementalChange: String
  }

type AtomOccurrence implements OwlClass
  {
    owlSubclassOf: OwlClass
    occurrenceOf: Atom!
    valence: Integer
    oxidationNumber: Integer
    formalCharge: Integer
    coordinationNumber: Integer
  }

type AtomicBond implements OwlClass
  {
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    bondOrder: Integer
    bondType: BondTypeEnum
    bondLengthInAngstroms: Float
    bondAngle: Float
    torsionalAngle: Float
  }

type BaseFormOfConjugatedAcid
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

interface CationState
  {
    elementalCharge: Integer
  }

interface ChargeState
  {
    elementalCharge: Integer
  }

interface Charged
  {
    elementalCharge: Integer
  }

type ChemicalElement
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    name: String
    hasPart: SubatomicParticle
    symbol: String
    periodicTableGroup: String
    periodicTableBlock: String
    boilingPointInCelcius: Float
    meltingPointInCelcius: Float
    standardAtomicWeight: Float
    electronConfiguration: String
    hasStereocenter: [Stereocenter]
  }

type ChemicalEntity implements OwlClass
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type ChemicalGroup
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type ChiralityCenter
  {
    owlSubclassOf: OwlClass
  }

type ConjugatedAcid
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    acidity: Float
    hardOrSoft: HardOrSoftEnum
  }

type Copolymer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasSubmolecules: [Molecule]
    polymerOf: Macromolecule
    hasPart: [Macromolecule]
  }

type Electron
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type Enantiomer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    relativeConfiguration: String
    opticalConfiguration: String
    absoluteConfiguration: String
    enantiomerFormOf: Molecule
  }

type FullySpecifiedAtom
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalCharge: Integer
    neutronNumber: Count
  }

type FunctionalGroup
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    isSubstitutentGroupFrom: Molecule
  }

type GeneralizedMolecularStructure
  {
    owlSubclassOf: OwlClass
    subtypeOf: [MoleculeGroupingClass]
    classifies: Molecule
  }

type Glycan
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasPart: String
    hasSubmolecules: [Molecule]
  }

type GroupingClass implements OwlClass
  {
    subtypeOf: [GroupingClass]
    classifies: ChemicalEntity
    owlSubclassOf: OwlClass
  }

type IsomeraseReaction
  {
    leftParticipants: [ReactionParticipant]
    rightParticipants: [ReactionParticipant]
    direction: String
    smartsString: String
    isDiastereoselective: Boolean
    isStereo: Boolean
    isBalanced: Boolean
    isTransport: Boolean
    isFullyCharacterized: Boolean
    reactionCenter: String
    description: String
  }

type Isotope
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    neutronNumber: Count
    isotopeOf: Isotope
    halfLife: NumberOfYears
    decayProduct: Isotope
    decayMode: String
    decayEnergy: String
    modeOfFormation: String
  }

type Location implements OwlClass
  {
    owlSubclassOf: OwlClass
  }

type Macromolecule
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasPart: String
    hasSubmolecules: [Molecule]
  }

type Measure
  {
    owlSubclassOf: OwlClass
  }

type Moiety
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type MolecularAnion implements AnionState
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    elementalCharge: Integer
  }

type MolecularCation implements CationState
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    elementalCharge: Integer
  }

type MolecularComplex
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type MolecularComponent
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type MolecularSpecies
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

type MolecularSubsequence
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

interface Molecule
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

type MoleculeGroupingClass
  {
    owlSubclassOf: OwlClass
    subtypeOf: [MoleculeGroupingClass]
    classifies: Molecule
  }

type MoleculePairwiseSimilarity
  {
    owlSubclassOf: OwlClass
    leftMolecule: Molecule
    rightMolecule: Molecule
    score: String
  }

type MoleculePart
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type MonoatomicIon implements Charged
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalCharge: Integer
    elementalChange: String
  }

type Monomer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type MonomolecularPolymer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasPart: String
    hasSubmolecules: [Molecule]
    polymerOf: Macromolecule
  }

type NaturalProduct
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

type Neutron
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type NonSpeciesMolecule
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

type Nucleon
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type Nuclide
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    energyLevel: String
  }

interface OwlClass
  {
    owlSubclassOf: OwlClass
  }

type Peptide
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasPart: String
    hasSubmolecules: [Molecule]
  }

interface PolyatomicEntity
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type PolyatomicIon implements Charged
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    elementalCharge: Integer
  }

type PolymerPart
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type Protein
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasAtoms: [Atom]
    hasPart: String
    hasSubmolecules: [Molecule]
  }

type Proton
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type RacemicMixture
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasLeftEnantiomer: Enantiomer!
    hasRightEnantiomer: Enantiomer!
  }

type Radionuclide
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    energyLevel: String
  }

type Reaction
  {
    leftParticipants: [ReactionParticipant]
    rightParticipants: [ReactionParticipant]
    direction: String
    smartsString: String
    isDiastereoselective: Boolean
    isStereo: Boolean
    isBalanced: Boolean
    isTransport: Boolean
    isFullyCharacterized: Boolean
    reactionCenter: String
    description: String
  }

type ReactionParticipant
  {
    owlSubclassOf: OwlClass
    participant: ChemicalEntity
    stoichiometry: Integer
  }

type RelationalChemicalEntity implements OwlClass
  {
    owlSubclassOf: OwlClass
  }

type Salt
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    elementalCharge: Integer
  }

type SequenceOfElements
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

interface State
  {
  }

type Stereocenter implements OwlClass
  {
    owlSubclassOf: OwlClass
  }

type Stereoisomer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
  }

type SubatomicParticle
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type SupramolecularPolymer
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
  }

type TanimotoSimilarity
  {
    owlSubclassOf: OwlClass
    leftMolecule: Molecule
    rightMolecule: Molecule
    score: Float
  }

interface Uncharged
  {
    elementalCharge: Integer
  }

type UnchargedAtom implements Uncharged
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    atomicNumber: Count
    symbol: String
    name: String
    hasPart: SubatomicParticle
    elementalCharge: Integer
    elementalChange: String
  }

type UnchargedMolecule implements Uncharged
  {
    id: String!
    isRadical: Boolean
    owlSubclassOf: OwlClass
    hasAtomOccurrences: [AtomOccurrence]
    hasBonds: [AtomicBond]
    hasSubmolecules: [Molecule]
    hasAtoms: [Atom]
    hasPart: String
    elementalCharge: Integer
  }


